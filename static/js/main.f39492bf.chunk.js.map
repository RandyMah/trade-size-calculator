{"version":3,"sources":["components/home.component.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","copyToClipboard","e","code","state","positionMode","entryPrice","leverage","contracts","stopLoss","targetPrice","textArea","value","select","setSelectionRange","result","document","execCommand","setState","copySuccess","accountSize","maxLoss","rewardToRisk","riskInDollars","profitAndLoss","units","tradeStatus","arrayKey","this","Number","parseFloat","target","doCalculations","text","getElementById","style","display","console","log","err","that","Math","abs","isNaN","undefined","toFixed","getPercentageValue","onePercentOfStopLoss","trunc","callback","getContracts","getUnits","getProfitAndLoss","getRewardToRisk","getRiskInDollars","getLeverage","className","type","step","placeholder","onChange","evt","handleChange","disabled","readOnly","id","ref","textarea","onClick","Component","App","Helmet","name","content","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f39492bf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      accountSize: 0,\r\n      maxLoss: 0,\r\n      entryPrice: 0,\r\n      targetPrice: 0,\r\n      stopLoss: 0,\r\n      copySuccess: \"\",\r\n      rewardToRisk: \"\",\r\n      riskInDollars: \"\",\r\n      profitAndLoss: \"\",\r\n      leverage: \"\",\r\n      contracts: \"\",\r\n      units: \"\",\r\n      tradeStatus: \"\",\r\n      positionMode: \"\",\r\n    };\r\n  }\r\n\r\n  handleChange(arrayKey, e) {\r\n    this.setState({ [arrayKey]: Number.parseFloat(e.target.value) }, () => {\r\n      this.doCalculations(this);\r\n    });\r\n  }\r\n\r\n  copyToClipboard = (e) => {\r\n\r\n    let code = `document.querySelectorAll('[value=${this.state.positionMode}]')[0].click();\r\n              var nativeInputValueSetter=Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value').set;\r\n              var inputEvent = new Event('input', { bubbles: true});\r\n              var entryPrice = document.querySelectorAll('[name=price]')[0];\r\n              entryPrice.dispatchEvent(new Event('focus', { bubbles: true}));\r\n              nativeInputValueSetter.call(entryPrice, '${this.state.entryPrice}');\r\n              entryPrice.dispatchEvent(inputEvent);\r\n              var leverage = document.querySelector('[data-tip=\"Leverage\"]').children[1];\r\n              nativeInputValueSetter.call(leverage, '${this.state.leverage}');\r\n              leverage.dispatchEvent(inputEvent);\r\n              var contractSize = document.querySelector('[name=sum]');\r\n              nativeInputValueSetter.call(contractSize, '${this.state.contracts}');\r\n              contractSize.dispatchEvent(inputEvent);\r\n              var stopLossPrice = document.querySelectorAll('[name=price]')[1];\r\n              nativeInputValueSetter.call(stopLossPrice, '${this.state.stopLoss}');\r\n              stopLossPrice.dispatchEvent(inputEvent);\r\n              var takeProfitPrice = document.querySelector('[name=orders\\\\\\\\.0\\\\\\\\.price]');\r\n              nativeInputValueSetter.call(takeProfitPrice, '${this.state.targetPrice}');\r\n              takeProfitPrice.dispatchEvent(inputEvent);\r\n            `;\r\n\r\n    this.textArea.value = code;\r\n    this.textArea.select();\r\n    this.textArea.setSelectionRange(0, 99999); /* For mobile devices */\r\n    var result = document.execCommand(\"copy\");\r\n    this.setState({ copySuccess: result ? \"Copied!\": \"Unable to copy\" });\r\n  };\r\n\r\n  copyText() {\r\n    // set textarea to display block, then select the text inside the textarea\r\n    let text = document.getElementById(\"consoleScript\");\r\n    text.style.display = \"block\";\r\n    text.select();\r\n    // copy the text in the textarea\r\n    try {\r\n      let status = document.execCommand(\"Copy\");\r\n      if (!status) {\r\n        console.log(\"Cannot copy text\");\r\n      } else {\r\n        console.log(\"Copied\");\r\n      }\r\n    } catch (err) {\r\n      console.log(\"Cannot copy text\");\r\n    }\r\n    text.style.display = \"none\";\r\n  }\r\n\r\n  getRewardToRisk(that) {\r\n    let value =\r\n      Math.abs(\r\n        (that.state.entryPrice - that.state.targetPrice) / that.state.entryPrice\r\n      ) /\r\n      Math.abs(\r\n        (that.state.entryPrice - that.state.stopLoss) / that.state.entryPrice\r\n      );\r\n    if (!Number.isNaN(value) && value !== undefined)\r\n      that.setState({\r\n        rewardToRisk: value.toFixed(2),\r\n        tradeStatus: value < 1 ? \"short\": \"\"\r\n      });\r\n  }\r\n  getRiskInDollars(that) {\r\n    let value =\r\n      this.getPercentageValue(that.state.maxLoss) * that.state.accountSize;\r\n    if (!Number.isNaN(value) && value !== undefined)\r\n      that.setState({\r\n        riskInDollars: value,\r\n      });\r\n  }\r\n  getProfitAndLoss(that) {\r\n    let value =\r\n      Math.abs(\r\n        (that.state.entryPrice - that.state.targetPrice) / that.state.entryPrice\r\n      ) * that.state.contracts;\r\n      let positionMode =\r\n        this.state.entryPrice < this.state.targetPrice ? \"long\" : \"short\";\r\n    if (!Number.isNaN(value) && value !== undefined)\r\n      that.setState({\r\n        profitAndLoss: value.toFixed(4),\r\n        positionMode: positionMode,\r\n      });\r\n  }\r\n  getLeverage(that) {\r\n    let entryPrice = that.state.entryPrice;\r\n    let targetPrice = that.state.targetPrice;\r\n    let stopLoss = that.state.stopLoss;\r\n    let onePercentOfStopLoss = stopLoss / 100;\r\n    let value = 0;\r\n    if (entryPrice < targetPrice) {\r\n      // Long\r\n      value =\r\n        (stopLoss - onePercentOfStopLoss) /\r\n        (entryPrice - (stopLoss - onePercentOfStopLoss * 0.99));\r\n    } else {\r\n      value =\r\n        (stopLoss+onePercentOfStopLoss)/(((stopLoss+onePercentOfStopLoss)*1.01)-entryPrice)\r\n    }\r\n    if (!Number.isNaN(value) && value !== undefined)\r\n      that.setState({\r\n        leverage: Math.abs(Math.trunc(value)),\r\n      });\r\n  }\r\n  getContracts(that, callback) {\r\n    let value =\r\n      (that.state.accountSize * this.getPercentageValue(that.state.maxLoss)) /\r\n      ((that.state.entryPrice - that.state.stopLoss) / that.state.entryPrice);\r\n    if (!Number.isNaN(value) && value !== undefined)\r\n      that.setState(\r\n        {\r\n          contracts: Math.abs(value.toFixed(4)),\r\n        },\r\n        () => {\r\n          callback();\r\n        }\r\n      );\r\n  }\r\n  getUnits(that) {\r\n    let value = that.state.contracts / that.state.entryPrice;\r\n    if (!Number.isNaN(value) && value !== undefined)\r\n      that.setState({\r\n        units: value.toFixed(5),\r\n        tradeStatus: value < 0.001 ? \"short\" : \"\",\r\n      });\r\n  }\r\n  doCalculations(that) {\r\n    this.getContracts(that, () => {\r\n      this.getUnits(that);\r\n      this.getProfitAndLoss(that);\r\n    });\r\n    this.getRewardToRisk(that);\r\n    this.getRiskInDollars(that);\r\n    this.getLeverage(that);\r\n  }\r\n\r\n  getPercentageValue(value) {\r\n    return value / 100;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Calculator</h3>\r\n        <div className=\"form-row\">\r\n          <div className=\"col\">\r\n            <div className=\"form-group\">\r\n              <label>Account Size ($)</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\".01\"\r\n                className=\"form-control\"\r\n                placeholder=\"Enter Account Size\"\r\n                onChange={(evt) => this.handleChange(\"accountSize\", evt)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col\">\r\n            <div className=\"form-group\">\r\n              <label>Reward:Risk</label>\r\n              <input\r\n                type=\"text\"\r\n                className={`form-control ${this.state.tradeStatus}`}\r\n                disabled\r\n                value={this.state.rewardToRisk}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-row\">\r\n          <div className=\"col\">\r\n            <div className=\"form-group\">\r\n              <label>Max Loss %</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                placeholder=\"Enter Max Loss %\"\r\n                step=\".01\"\r\n                onChange={(evt) => this.handleChange(\"maxLoss\", evt)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col\">\r\n            <div className=\"form-group\">\r\n              <label>Risk in $</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                disabled\r\n                value={this.state.riskInDollars}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-row\">\r\n          <div className=\"col\">\r\n            <div className=\"form-group\">\r\n              <label>Entry Price</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\".0000000001\"\r\n                className=\"form-control\"\r\n                placeholder=\"Enter Entry Price\"\r\n                onChange={(evt) => this.handleChange(\"entryPrice\", evt)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col\">\r\n            <div className=\"form-group\">\r\n              <label>Profit</label>\r\n              <input\r\n                type=\"number\"\r\n                className={`form-control ${this.state.positionMode}`}\r\n                disabled\r\n                value={this.state.profitAndLoss}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-row\">\r\n          <div className=\"col\">\r\n            <div className=\"form-group\">\r\n              <label>Target Price</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\".0000000001\"\r\n                className=\"form-control\"\r\n                placeholder=\"Enter Target Price\"\r\n                onChange={(evt) => this.handleChange(\"targetPrice\", evt)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col\">\r\n            <div className=\"form-group\">\r\n              <label>Leverage</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                disabled\r\n                value={this.state.leverage}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-row\">\r\n          <div className=\"col\">\r\n            <div className=\"form-group\">\r\n              <label>Stop Loss Price</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\".0000000001\"\r\n                className=\"form-control\"\r\n                placeholder=\"Enter Stop Loss Price\"\r\n                onChange={(evt) => this.handleChange(\"stopLoss\", evt)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col\">\r\n            <div className=\"form-group\">\r\n              <label>Contracts</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                disabled\r\n                value={this.state.contracts}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-row\">\r\n          <div className=\"col\">\r\n            <div className=\"form-group\">\r\n              <textarea\r\n                readOnly=\"readonly\"\r\n                className=\"form-control\"\r\n                id=\"consoleScript\"\r\n                ref={(textarea) => (this.textArea = textarea)}\r\n              ></textarea>\r\n            </div>\r\n          </div>\r\n          <div className=\"col\">\r\n            <div className=\"form-group\">\r\n              <label>Units</label>\r\n              <input\r\n                disabled\r\n                type=\"text\"\r\n                className={`form-control ${this.state.tradeStatus}`}\r\n                value={this.state.units}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          className=\"btn btn-dark btn-lg btn-block\"\r\n          onClick={() => this.copyToClipboard()}\r\n        >\r\n          Copy Code\r\n        </button>\r\n        <p>{this.state.copySuccess}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { BrowserRouter as Router} from \"react-router-dom\";\r\nimport { Helmet} from \"react-helmet\";\r\n\r\nimport Home from \"./components/home.component\";\r\n\r\nfunction App() {\r\n  return (<Router>\r\n    <Helmet>\r\n      <title>Trade size calculator</title>\r\n      <meta name=\"description\" content = \"Your best trade size calculator\"/>\r\n    </Helmet>\r\n    <div className=\"App\">\r\n      <div className=\"outer\">\r\n        <div className=\"inner\">\r\n            <Home/>\r\n        </div>\r\n      </div>\r\n    </div></Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}